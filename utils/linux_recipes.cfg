{
    "trigger_list": [
        {
            "trigger_fn": "owner_show",
            "arg_index": 0,
            "arg_type": "s:tun_struct",
            "offset": "(((((@{s:net_device})) + ((typeof ((@{s:net_device})))((32)) - 1)) & ~((typeof ((@{s:net_device})))((32)) - 1)) - (${dev,s:net_device}))",
            "type": "append"
        },
        {
            "trigger_fn": "priority_show@br_sysfs_br.c",
            "arg_index": 0,
            "arg_type": "s:net_bridge",
            "offset": "(((((@{s:net_device})) + ((typeof ((@{s:net_device})))((32)) - 1)) & ~((typeof ((@{s:net_device})))((32)) - 1)) - (${dev,s:net_device}))",
            "type": "append"
        }
    ],
    "custom_element_count_map": {
        "s:sec_star_s:rsp": "____ATTR_BY_OFFSET(_ptr,${rsp_size,s:sec_star_s},unsigned int)",
        "s:sec_star_s:protocol": 1,
        "s:sec_star_s:hal": 1,
        "s:generic_pm_domain:states": "____ATTR_BY_OFFSET(_ptr,${state_count,s:generic_pm_domain},unsigned int)",
        "s:device:parent": 1
        "#s:list_head:next": 1,
        "#s:list_head:prev": 1
    },
    "custom_ptr_map": {
        "#s:list_head:next": {
            "typestring": "s:list_head",
            "info": "We couldn't detect whether this 'list_head' member was a head of a list. We then assume that it was the anchor.\n Having an anchor we cannot flatten the target container type as we might be pointing to the head of a list which probably have different type that the container type.\n We must then flatten it just as 'list_head' type and flatten the entire list of container types through its head (running it from some other context)."
        },
        "#s:list_head:prev": {
            "typestring": "s:list_head",
            "info": "We couldn't detect whether this 'list_head' member was a head of a list. We then assume that it was the anchor.\n Having an anchor we cannot flatten the target container type as we might be pointing to the head of a list which probably have different type that the container type.\n We must then flatten it just as 'list_head' type and flatten the entire list of container types through its head (running it from some other context)."
        }
    },
    "custom_ptr_map_variants": {
        "gpio_ioctl@gpiolib-cdev.c": {
            "s:file:private_data": {
                "typestring": "s:gpio_chardev_data",
                "info": "gpio_ioctl@gpiolib-cdev.c: [struct gpio_chardev_data *cdev = file->private_data;]"
            }
        },
        "mass_storage_inquiry_show@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_inquiry_show@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "mass_storage_inquiry_store@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_inquiry_store@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "mass_storage_product_show@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_product_show@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "mass_storage_product_store@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_product_store@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "mass_storage_vendor_show@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_vendor_show@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "mass_storage_vendor_store@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "mass_storage_vendor_store@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "sua_version_info_show@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "sua_version_info_show@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "sua_version_info_store@f_mass_storage.c": {
            "s:device:driver_data": {
                "typestring": "s:fsg_opts",
                "offset": "${func_inst,s:fsg_opts}",
                "info": "sua_version_info_store@f_mass_storage.c: [struct usb_function_instance *f = dev_get_drvdata(dev); struct fsg_opts *fsg_opts = fsg_opts_from_func_inst(f);]"
            }
        },
        "nu1668_show_attrs@nu1668_charger.c": {
            "s:device:driver_data": {
                "typestring": "s:power_supply",
                "info": "nu1668_show_attrs@nu1668_charger.c: [struct power_supply *psy = dev_get_drvdata(dev);]"
            }
        },
        "nu1668_store_attrs@nu1668_charger.c": {
            "s:device:driver_data": {
                "typestring": "s:power_supply",
                "info": "nu1668_store_attrs@nu1668_charger.c: [struct power_supply *psy = dev_get_drvdata(dev);]"
            }
        },
        "pdic_sysfs_show_property@pdic_sysfs.c": {
            "s:device:driver_data": {
                "typestring": "s:_pdic_data_t",
                "info": "pdic_sysfs_show_property@pdic_sysfs.c: [ppdic_data_t ppdic_data = dev_get_drvdata(dev);]"
            }
        },
        "pdic_sysfs_store_property@pdic_sysfs.c": {
            "s:device:driver_data": {
                "typestring": "s:_pdic_data_t",
                "info": "pdic_sysfs_store_property@pdic_sysfs.c: [ppdic_data_t ppdic_data = dev_get_drvdata(dev);]"
            }
        },
        "spi_slave_state_show@spi-msm-geni.c": {
            "s:device:driver_data": {
                "typestring": "s:spi_controller",
                "info": "spi_slave_state_show@spi-msm-geni.c: [struct spi_controller *spi = platform_get_drvdata(pdev);]"
            },
            "@s:device:driver_data": {
                "typestring": "s:spi_geni_master",
                "info": "spi_slave_state_show@spi-msm-geni.c: [struct spi_geni_master *geni_mas; geni_mas = spi_master_get_devdata(spi);]"
            }
        },
        "star_dev_write@sec_star.c": {
            "s:sec_star_s:protocol": {
                "typestring": "t:iso7816_t1_t",
                "info": "ese_iso7816_t1.c: [iso7816_t1_t *protocol = (iso7816_t1_t *)ctx;]"
            },
            "s:sec_star_s:hal": {
                "typestring": "s:ese_hal_s",
                "info": "ese_hal.c: [struct ese_hal_s *hal = (struct ese_hal_s *)ctx;]"
            }
        }
    },
    "custom_global_element_count_map": {
    },
    "custom_recipes": {
        "s:list_head": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(list_head,16,\n\tAGGREGATE_FLATTEN_STRUCT_ARRAY_SELF_CONTAINED_SHIFTED(list_head,16,next,0,1,0);\n\tAGGREGATE_FLATTEN_STRUCT_ARRAY_SELF_CONTAINED_SHIFTED(list_head,16,prev,8,1,0);\n);"
    },
    "custom_recipe_variants": {
        "amdgpu_debugfs_gpr_read": {
            "s:amdgpu_device:reg_offset": "~{custom_recipes/amdgpu_device-reg_offset}",
            "s:ip": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(ip,@{s:ip});"
        },
        "amdgpu_debugfs_regs_read": {
            "s:amdgpu_device:reg_offset": "~{custom_recipes/amdgpu_device-reg_offset}",
            "s:ip": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(ip,@{s:ip});"
        },
        "amdgpu_debugfs_regs_write": {
            "s:amdgpu_device:reg_offset": "~{custom_recipes/amdgpu_device-reg_offset}",
            "s:ip": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(ip,@{s:ip});"
        },
        "amdgpu_debugfs_wave_read": {
            "s:amdgpu_device:reg_offset": "~{custom_recipes/amdgpu_device-reg_offset}",
            "s:ip": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(ip,@{s:ip});"
        },
        "show_shost_state": {
            "t:anonstruct_type_0_t": "FUNCTION_DEFINE_FLATTEN_STRUCT_TYPE_SELF_CONTAINED(anonstruct_type_0_t,16,AGGREGATE_FLATTEN_STRING_SELF_CONTAINED(char,8););"
        },
        "show_state_field": {
            "t:anonstruct_type_0_t": "FUNCTION_DEFINE_FLATTEN_STRUCT_TYPE_SELF_CONTAINED(anonstruct_type_0_t,16,AGGREGATE_FLATTEN_STRING_SELF_CONTAINED(char,8););"
        }
    },
    "custom_string_members": {
        "s:copr_reg_info:name": "[ get_copr_reg_name(): return copr_reg_v0_list[index].name -> | name = get_copr_reg_name(version, i); | strncmp(name, s, strlen(name)) ]"
    },
    "force_detect_object_size": {
        "s:devfreq_stats:time_in_state": "devfreq_c: [memset(df->stats.time_in_state, 0, (df->max_state * sizeof(*df->stats.time_in_state)));]"
    },
    "ignore_refnames": {
        "s:mem_link_device": ["dummy_net.dev.driver_data"]
    },
    "allowed_members": {
        "s:mutex_waiter": [],
        "s:lock_class_key": [],
        "s:mutex": [],
        "s:rwsem_waiter": [],
    }
}
