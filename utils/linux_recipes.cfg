{
    "trigger_list": [
        {
            "trigger_fn": "owner_show",
            "arg_index": 0,
            "arg_type": "s:tun_struct",
            "offset": "(((((@{s:net_device})) + ((typeof ((@{s:net_device})))((32)) - 1)) & ~((typeof ((@{s:net_device})))((32)) - 1)) - (${dev,s:net_device}))",
            "type": "append"
        },
        {
            "trigger_fn": "priority_show@br_sysfs_br.c",
            "arg_index": 0,
            "arg_type": "s:net_bridge",
            "offset": "(((((@{s:net_device})) + ((typeof ((@{s:net_device})))((32)) - 1)) & ~((typeof ((@{s:net_device})))((32)) - 1)) - (${dev,s:net_device}))",
            "type": "append"
        }
    ],
    "custom_element_count_map": {
    },
    "custom_ptr_map": {
    },
    "custom_ptr_map_variants": {
        "gpio_ioctl@gpiolib-cdev.c": {
            "s:file:private_data": {
                "typestring": "s:gpio_chardev_data",
                "info": "gpio_ioctl@gpiolib-cdev.c: [struct gpio_chardev_data *cdev = file->private_data;]"
            }
        }
    },
    "custom_global_element_count_map": {
    },
    "custom_recipes": {
        "s:amdgpu_device:reg_offset": "~{custom_recipes/amdgpu_device-reg_offset}",
        "s:ip": "FUNCTION_DEFINE_FLATTEN_STRUCT_SELF_CONTAINED(ip,@{s:ip});"
    },
    "custom_string_members": {
        "s:copr_reg_info:name": "[ get_copr_reg_name(): return copr_reg_v0_list[index].name -> | name = get_copr_reg_name(version, i); | strncmp(name, s, strlen(name)) ]"
    },
    "force_detect_object_size": {
    },
    "ignore_refnames": {
        "s:mem_link_device": ["dummy_net.dev.driver_data"]
    },
    "allowed_members": {
        "s:mutex_waiter": [],
        "s:lock_class_key": [],
        "s:mutex": [],
        "s:rwsem_waiter": [],
    }
}
